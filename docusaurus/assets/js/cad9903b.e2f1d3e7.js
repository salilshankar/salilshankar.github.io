"use strict";(self.webpackChunkauto_doc_test=self.webpackChunkauto_doc_test||[]).push([[8682],{6215:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>d,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"taskhive-api/update_task","title":"Update Task API Endpoint","description":"Documentation for the Update Task API endpoint, detailing its usage and functionality.","source":"@site/docs/taskhive-api/update_task.md","sourceDirName":"taskhive-api","slug":"/taskhive-api/update_task","permalink":"/docusaurus/docs/taskhive-api/update_task","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/taskhive-api/update_task.md","tags":[],"version":"current","frontMatter":{"title":"Update Task API Endpoint","description":"Documentation for the Update Task API endpoint, detailing its usage and functionality."},"sidebar":"tutorialSidebar","previous":{"title":"Serve Index Component","permalink":"/docusaurus/docs/taskhive-api/serve_index"},"next":{"title":"Access data from the DB (static example)","permalink":"/docusaurus/docs/runnable-code/access-data-static"}}');var i=n(4848),a=n(8453);const d={title:"Update Task API Endpoint",description:"Documentation for the Update Task API endpoint, detailing its usage and functionality."},r="Update Task API Endpoint",o={},l=[{value:"Endpoint Summary",id:"endpoint-summary",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Request Body",id:"request-body",level:2},{value:"Response",id:"response",level:2},{value:"Rendered HTML Elements",id:"rendered-html-elements",level:2},{value:"Example Usage",id:"example-usage",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"update-task-api-endpoint",children:"Update Task API Endpoint"})}),"\n",(0,i.jsx)(t.p,{children:"The Update Task API endpoint allows users to modify the details of an existing task."}),"\n",(0,i.jsx)(t.h2,{id:"endpoint-summary",children:"Endpoint Summary"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Path"}),": ",(0,i.jsx)(t.code,{children:"/api/tasks/<int:task_id>"})]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Methods"}),": ",(0,i.jsx)(t.code,{children:"PUT"})]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Function"}),": ",(0,i.jsx)(t.code,{children:"update_task"})]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"task_id"}),": An integer representing the unique identifier of the task you wish to update. This is a required parameter and must be included in the URL path."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"request-body",children:"Request Body"}),"\n",(0,i.jsx)(t.p,{children:"The request body should be in JSON format and may include the following fields to update the task:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"title"}),": A string representing the new title of the task."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"description"}),": A string providing a detailed description of the task."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"status"}),': A string indicating the current status of the task (e.g., "pending", "in-progress", "completed").']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"due_date"}),": A string in ISO 8601 format representing the new due date for the task."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"response",children:"Response"}),"\n",(0,i.jsx)(t.p,{children:"Upon successful update, the API will return a JSON object containing the updated task details."}),"\n",(0,i.jsx)(t.h2,{id:"rendered-html-elements",children:"Rendered HTML Elements"}),"\n",(0,i.jsx)(t.p,{children:"This API endpoint does not directly render any HTML elements. It is intended for backend use, typically consumed by client-side applications that handle the rendering of data returned from the API."}),"\n",(0,i.jsx)(t.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,i.jsxs)(t.p,{children:["To update a task with ID 123, you would send a PUT request to ",(0,i.jsx)(t.code,{children:"/api/tasks/123"})," with a JSON body containing the fields you wish to update."]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>r});var s=n(6540);const i={},a=s.createContext(i);function d(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);