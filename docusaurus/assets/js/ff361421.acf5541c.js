"use strict";(self.webpackChunkauto_doc_test=self.webpackChunkauto_doc_test||[]).push([[6632],{5916:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"taskhive-api/create_note","title":"Create Note Component","description":"Documentation for the Create Note UI component that allows users to add new notes via a POST request.","source":"@site/docs/taskhive-api/create_note.md","sourceDirName":"taskhive-api","slug":"/taskhive-api/create_note","permalink":"/docs/taskhive-api/create_note","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/taskhive-api/create_note.md","tags":[],"version":"current","frontMatter":{"title":"Create Note Component","description":"Documentation for the Create Note UI component that allows users to add new notes via a POST request."},"sidebar":"tutorialSidebar","previous":{"title":"Tutorial Intro","permalink":"/docs/taskhive-api/intro"},"next":{"title":"Create Task Component","permalink":"/docs/taskhive-api/create_task"}}');var o=n(4848),i=n(8453);const r={title:"Create Note Component",description:"Documentation for the Create Note UI component that allows users to add new notes via a POST request."},a=void 0,c={},l=[{value:"Props",id:"props",level:3},{value:"Rendered HTML Elements",id:"rendered-html-elements",level:3}];function d(e){const t={code:"code",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["The Create Note component enables users to add new notes by sending a POST request to the ",(0,o.jsx)(t.code,{children:"/api/notes"})," endpoint."]}),"\n",(0,o.jsx)(t.h3,{id:"props",children:"Props"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"title"})," (string): The title of the note. This is a required field and should succinctly describe the content of the note."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"content"})," (string): The main body of the note. This is a required field and contains the detailed information or message of the note."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"tags"})," (array of strings, optional): A list of tags associated with the note. Tags help in categorizing and searching for notes."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"onSuccess"})," (function, optional): A callback function that is executed after a note is successfully created. It can be used to trigger UI updates or notifications."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"onError"})," (function, optional): A callback function that is executed if there is an error during the note creation process. This can be used to display error messages to the user."]}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"rendered-html-elements",children:"Rendered HTML Elements"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"<form>"})}),": The main container for the input fields and submission button. It handles user input and submission events."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:'<input type="text">'})}),": An input field for entering the note's title."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"<textarea>"})}),": A text area for entering the note's content."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:'<input type="text">'})}),": An input field for entering tags, typically allowing multiple entries."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:'<button type="submit">'})}),": A submit button that triggers the creation of the note when clicked."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"This component is essential for users who need to create and manage notes efficiently within the application."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(6540);const o={},i=s.createContext(o);function r(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);